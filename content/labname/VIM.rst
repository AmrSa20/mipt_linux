======================
Файловый редактор VIM
======================

:date: 2021-05-17 19:00
:summary: Работа по текстовому редактору VIM
:status: published
:author: Папа-Дмитриева Ю.А.

.. default-role:: code
.. contents:: Содержание: 

* Работа в VIM
* Работа в VIM на разных ОС
* Команды VIM
* Командная строка VIM
* Плагины 
* Тема 
* VIM и Jupiter


**VIM** - мощный текстовый редактор с полной свободой настройки и автоматизации. На данный момент существует две версии редактора - vi и vim. Vim расшифровывается как Vi Improved, улучшенный vi.

В VIM имеется несколько «режимов работы», переключение между ними приводит к изменению функционала клавиатурных клавиш. При таком подходе клавиатура используется и для ввода символов, и для перемещения по тексту. Это удобно для переключения между редактированием и просмотром кода.

Для начала создадим файл VIM:

*vim /filename/*

Работа в VIM
---------------

В каждом руководстве по Vim рекомендуется начинать изучать этот текстовый редактор с vimtutor. Надо просто установить vimtutor и, когда найдётся 10-15 минут свободного времени, прорабатывать этот официальный учебник по VIM.

Работа в VIM на разных ОС
-------------------------

Пользователи Windows могут использовать WSL (Windows Subsystem for Linux) и для прохождения vimtutor, и для работы с Vim.

У хозяев макбуков есть встроенная командная строка, так что всё сильно проще.

Команды VIM
----------------

Текстовый редактор VIM может работать в двух режимах. 

:Первый режим:  По умолчанию при открытии редактора, *командный*. В этом режиме вы можете вводить команды vim, а также использовать символьные клавиши для управления редактором. 

:Второй режим: Обычное *редактирование* текста. Для переключения в командный режим используется клавиша Esc. Для переключения в режим редактирования - клавиша i.

**Список самых полезных команд, применимых в обычном режиме работы:**

*vimtutor* - выполняется из bash. Представляет собой встроенный краткий курс по vim

*Поиск по файлу:* 

Для поиска по всему файлу используйте команду /. После нее нужно ввести слово, которое нужно найти. Для поиска следующего вхождения используйте *n*, для предыдущего - *N*.

*Движение по файлу:* 

*w* - переход на одно слово вперед 

*2w* - переход на слова вперед. Цифра указывает на сколько слов необходимо перейти. 

*b* - переход на одно слово назад 

*2b* - переход на 2 слова назад 

*gg* - переход в начало файла 

*G* - переход в конец файла 

*0* - переход в начало строки 

*$* - переход в конец строки 

*номер_строки + Ctrl + G* - переход на указанную строку 

*стрелки* - перемещения по файлу 

*Удаление:* 

*d$* - удаление строки, начиная от текущей позиции и до конца строки 

*dd* - удаление всей строки 

*d2w* - удаление 2-х первых слов, то есть удаление вперед от текущей позиции 

*d2b* - удаление 2-х последних слов, то есть удаление назад от текущей позиции 

*x, Delete* - посимвольное удаление 

*ciw* — (Change Inside Word) удаление текущего слова и автоматический переход в режим вставки 

*C* — удалить текст от позиции курсора до конца строки и перейти в режим вставки 

*dt<char>* — (Delete To <character>) удалить текст от позиции курсора до следующего вхождения указанного символа 

*Копирование и вставка:* 

Текстовый редактор Vim имеет свой буфер обмена.

*y* - копирование в буфер обмена 

*p* - вставка из буфера обмена (после) 

*P* - вставка до текущего символа 

*yw* - скопировать слово 

*Ctrl+u, Ctrl+d* — прокрутка области просмотра вверх или вниз на полстраницы

~ — переключение регистра (верхний/нижний) текущего или выделенного символа

. — повтор последней команды

/ - поиск по файлу

*i*0* - переход в режим редактирования

*v, V* - переход в визуальный режим

*u, U* - откат действий

*Ctrl + R* - отмена отката действий

*Ctrl + W* - переключение между открытыми файлами одного терминала.

*r буква (символ)* - заменяет букву в тексте под курсором на указанную букву

*:help* - справка

*:set number* - включить нумерацию строк

Командная строка VIM
---------------------

Командная строка Vim запускается в командном режиме нажатием двоеточия - ":". Здесь доступны команды для сохранения файла и выхода из редактора, настройки внешнего вида и взаимодействия с внешней оболочкой.

*:q* - закрыть файл

*:wq* - сохранить и закрыть файл

*:!q* - закрыть файл без сохранения изменений

*:w* - сохранить изменения

*:buffers* - посмотреть все открытые файлы

*:[i],[n]s/что заменяем/на что/* - замена с i по n строку (только первого вхождения)

*:[i],[n]s/что заменяем/на что/g* - замена всех вхождений

*:sp файл* - открывает новый файл в текущем терминале, текущий файл при этом остается открытым

*:номер строки* - переход на указанную строку 

Плагины
--------

Главным оружием для настройки явлются плагины.

Плаги́н — независимо компилируемый программный модуль, подключаемый к основной программе и предназначенный для расширения и/или использования её возможностей.

По сути дела, это просто отдельные файлы с кодом на VimScript, которые исполняются при загрузке вашего файла настроек (~/.vimrc или ~/.config/nvim/init.vim) командой source. 

Тема
------------------

Для удобной работы в VIM его можно красиво оформить. Например, выбрать тему. Для этого можно пользоваться уже готовыми плагинами и готовыми темами следующим образом: 

Добавить в список плагинов следующее: 

Plug 'ErichDonGubler/vim-sublime-monokai'  

И добавить не в список плагинов: 

colorscheme sublimemonokai 

Аналогичным путём можно изменить строку состояния - сделать компактнее обозначения, выделить другим цветом. 

VIM и Jupiter 
--------------

Начальная настройка для Jupyter: 

*jupyter qtconsole --generate-config vim ~/.jupyter/jupyter_qtconsole_config.py*
 
После в строчке  

*#c.ConsoleWidget.include_other_output = False*

Меняем False на True и снимаем #. 

Затем добавляем в VIM для установки Jupyter-vim: 

*... Plug 'jupyter-vim/jupyter-vim' ...*
 
После, открыв код на Python (или на другом поддерживаемом языке), можем разбить его на блоки (начало блока обозначается символом ##) и подключиться к Jupyter. Для этого сначала запускаем: 

*jupyter qtconsole &*

А в самом VIM вводим: 
 
*:JupyterConnect (в редакторе)* 

Теперь по нажатию \X вы исполните в Jupyter блок кода, на котором у вас стоит курсор, а по нажатию \R прогонится весь файл. 
